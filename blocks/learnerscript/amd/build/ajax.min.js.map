{"version":3,"sources":["../src/ajax.js"],"names":["define","$","config","Log","ModalFactory","unloading","requestSuccess","response","request","error","cap","debuginfo","errorcode","msg","create","title","type","body","footer","done","modal","dialogue","show","deferred","reject","resolve","exception","Error","requestFail","jqXHR","textStatus","call","async","loginrequired","window","bind","ajaxRequestData","promise","args","Deferred","fail","JSON","stringify","settings","data","context","dataType","processData","global","contentType","beforeSend","loading","success","hide","ajax","url","sesskey"],"mappings":"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","sourcesContent":["/**\n * Standard Ajax wrapper for LearnerScript Reports. It calls the central Ajax script,\n *\n * @module     block_learnerscript/ajax\n * @class      ajax\n * @package    learnerscript\n * @copyright  2017 Naveen kumar <naveen@eabyas.in>\n */\ndefine(['jquery', 'core/config', 'core/log', 'core/modal_factory'], function($, config, Log, ModalFactory) {\n    // Keeps track of when the user leaves the page so we know not to show an error.\n    var unloading = false;\n    /**\n     * Success handler. Called when the ajax call succeeds. Checks each response and\n     * resolves or rejects the deferred from that request.\n     *\n     * @method requestSuccess\n     * @private\n     * @param response containing error, exception and data attributes.\n     */\n    var requestSuccess = function(response) {\n        // Call each of the success handlers.\n        var request = this;\n        if (response === null) {\n            return;\n        }\n        if (response.error) {\n            // There was an error with the request as a whole.\n            // We need to reject each promise.\n            // Unfortunately this may lead to duplicate dialogues, but each Promise must be rejected.\n            if (response.cap || response.debuginfo ||response.errorcode) {\n                var msg = response.msg || response.error;\n                ModalFactory.create({\n                    title: response.type || response.errorcode,\n                    body: '<p>' + msg + '</p>',\n                    footer: '',\n                }).done(function(modal) {\n                    dialogue = modal;\n                    // Display the dialogue.\n                    dialogue.show();\n                });\n            } else {\n                Log.error(response.type + ': ' + response.msg);\n            }\n            request.deferred.reject(response);\n            return;\n        }\n        // We may not have responses for all the requests.\n        if (typeof response !== \"undefined\") {\n            // if (response.error === false) {\n            // Call the done handler if it was provided.\n            request.deferred.resolve(response);\n            // } else {\n            //     exception = response.exception;\n            // }\n        } else {\n            // This is not an expected case.\n            exception = new Error('missing response');\n        }\n        // Something failed, reject the remaining promises.\n        if (typeof(exception) !== 'undefined' && exception !== null) {\n            request.deferred.reject(exception);\n        }\n    };\n    /**\n     * Fail handler. Called when the ajax call fails. Rejects all deferreds.\n     *\n     * @method requestFail\n     * @private\n     * @param {jqXHR} jqXHR The ajax object.\n     * @param {string} textStatus The status string.\n     * @param {Error|Object} exception The error thrown.\n     */\n    var requestFail = function(jqXHR, textStatus, exception) {\n        // Reject all the promises.\n        var request = this;\n        if (unloading) {\n            // No need to trigger an error because we are already navigating.\n            Log.error(\"Page unloaded.\");\n            Log.error(exception);\n        } else {\n            Log.error(\"Page Not Responding.\");\n            Log.error(exception);\n            request.deferred.reject(exception);\n        }\n    };\n    return /** @alias module:core/ajax */ {\n        // Public variables and functions.\n        /**\n         * Make a series of ajax requests and return all the responses.\n         *\n         * @method call\n         * @param {Object[]} requests Array of requests with each containing methodname and args properties.\n         *                   done and fail callbacks can be set for each element in the array, or the\n         *                   can be attached to the promises returned by this function.\n         * @param {Boolean} async Optional, defaults to true.\n         *                  If false - this function will not return until the promises are resolved.\n         * @param {Boolean} loginrequired Optional, defaults to true.\n         *                  If false - this function will call the faster nologin ajax script - but\n         *                  will fail unless all functions have been marked as 'loginrequired' => false\n         *                  in services.php\n         * @return {Promise[]} Array of promises that will be resolved when the ajax call returns.\n         */\n        call: function(request, async, loginrequired) {\n            $(window).bind('beforeunload', function() {\n                unloading = true;\n            });\n            var ajaxRequestData,\n                promise = {};\n            if (typeof loginrequired === \"undefined\") {\n                loginrequired = true;\n            }\n            if (typeof async === \"undefined\") {\n                async = true;\n            }\n            ajaxRequestData = request.args;\n            request.deferred = $.Deferred();\n            promise = request.deferred.promise();\n            // Allow setting done and fail handlers as arguments.\n            // This is just a shortcut for the calling code.\n            if (typeof request.done !== \"undefined\") {\n                request.deferred.done(request.done);\n            }\n            if (typeof request.fail !== \"undefined\") {\n                request.deferred.fail(request.fail);\n            }\n            ajaxRequestData = JSON.stringify(ajaxRequestData);\n            var settings = {\n                type: 'POST',\n                data: ajaxRequestData,\n                context: request,\n                dataType: 'json',\n                processData: false,\n                global: true,\n                async: async,\n                contentType: \"application/json\",\n                beforeSend: function() {\n                    // Handle the beforeSend event\n                    request.loading && $(request.loading).show();\n                },\n                success: function() {\n                    request.loading && $(request.loading).hide('fast');\n                    // Handle the complete event\n                }\n            };\n            // Jquery deprecated done and fail with async=false so we need to do this 2 ways.\n            if (async) {\n                $.ajax(request.url + '?sesskey=' + config.sesskey, settings).done(requestSuccess).fail(requestFail);\n            } else {\n                settings.success = requestSuccess;\n                settings.error = requestFail;\n                $.ajax(request.url + '?sesskey=' + config.sesskey, settings);\n            }\n            return promise;\n        }\n    };\n});"],"file":"ajax.min.js"}